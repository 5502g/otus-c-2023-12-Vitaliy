#ifndef LIST_H
#define LIST_H

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

/*узел связного списка*/
typedef struct node {
    int64_t number;
    struct node *next;
} node_t;

const int64_t data[] = {4, 8, 15, 16, 23, 42};

/* операция:    создание и инициализация узла
 * предусловия: num - число, добавляемое в узел
 *              nodep - указатель на узел
 * постусловия: возвращает указатель на созданный узел
 *              или NULL при ошибке выделения памяти*/
node_t *add_element(int64_t num, node_t *nodep);

/* операция:    применение функции к каждому элементу списка
 * предусловия: nodep - указатель на узел
 *              pfun - указатель на функцию
 * постусловия: ничего не возвращает*/
void m(node_t *nodep, void (*pfun)(node_t node));

/* операция:    вывод данных узла
 * предусловия: node - узел
 * постусловия: ничего не возвращает*/
void print_int(node_t node);

/* операция:    создание нового списка только с начётными числами
 * предусловия: nodep - указатель на текущий узел списка
 *              prev_nodep - указатель на предыдущий узел
 *              pfun - указатель на функцию
 * постусловия: возвращает адрес первого узла нового списка
 *              или NULL при ошибке выделения помяти*/
node_t *f(node_t *nodep, node_t *prev_nodep, int64_t (*pfun)(int64_t num));

/* операция:    проверка числа на чётность
 * предусловия: num - число
 * постусловия: возвращает 0, если число чётное, иначе - 1*/
int64_t p(int64_t num);

#endif
